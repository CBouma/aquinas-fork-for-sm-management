{"ast":null,"code":"var _jsxFileName = \"/Users/thomasturek/Documents/GitHub/aquinas/aquinas/src/components/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport TweetList from './TweetList';\nimport ReplyForm from './ReplyForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  token\n}) => {\n  _s();\n  const [tweets, setTweets] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  useEffect(() => {\n    fetchTweets(currentPage);\n    const socket = io({\n      auth: {\n        token: token\n      }\n    });\n    socket.on('newTweet', tweet => {\n      setTweets(prevTweets => [tweet, ...prevTweets]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [token, currentPage]);\n  const fetchTweets = async page => {\n    try {\n      const response = await fetch(`/api/tweets?page=${page}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      setTweets(data.tweets);\n      setCurrentPage(data.currentPage);\n      setTotalPages(data.totalPages);\n    } catch (error) {\n      console.error('Error fetching tweets:', error);\n    }\n  };\n  const handlePageChange = newPage => {\n    setCurrentPage(newPage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Social Media Engagement Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TweetList, {\n      tweets: tweets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentPage, \" of \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        disabled: currentPage === totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReplyForm, {\n      token: token\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"yZ5HAFSnEig75wvhBqCiGmZWUys=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","io","TweetList","ReplyForm","jsxDEV","_jsxDEV","Dashboard","token","_s","tweets","setTweets","currentPage","setCurrentPage","totalPages","setTotalPages","fetchTweets","socket","auth","on","tweet","prevTweets","disconnect","page","response","fetch","headers","data","json","error","console","handlePageChange","newPage","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/thomasturek/Documents/GitHub/aquinas/aquinas/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport TweetList from './TweetList';\nimport ReplyForm from './ReplyForm';\n\ninterface DashboardProps {\n  token: string;\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ token }) => {\n  const [tweets, setTweets] = useState<any[]>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  useEffect(() => {\n    fetchTweets(currentPage);\n\n    const socket = io({\n      auth: {\n        token: token\n      }\n    });\n\n    socket.on('newTweet', (tweet) => {\n      setTweets((prevTweets) => [tweet, ...prevTweets]);\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [token, currentPage]);\n\n  const fetchTweets = async (page: number) => {\n    try {\n      const response = await fetch(`/api/tweets?page=${page}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      setTweets(data.tweets);\n      setCurrentPage(data.currentPage);\n      setTotalPages(data.totalPages);\n    } catch (error) {\n      console.error('Error fetching tweets:', error);\n    }\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  return (\n    <div>\n      <h1>Social Media Engagement Dashboard</h1>\n      <TweetList tweets={tweets} />\n      <div>\n        <button onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1}>\n          Previous\n        </button>\n        <span>Page {currentPage} of {totalPages}</span>\n        <button onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages}>\n          Next\n        </button>\n      </div>\n      <ReplyForm token={token} />\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}